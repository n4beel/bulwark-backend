Factor,Complexity Layer,Extraction Method,Regex/Pattern Used,Formula Component,Weight/Points,Max Contribution,Description,Code Example,Example Impact
Lines of Code,Structural,Smart line counting with filtering,"Custom lineCounter() method - excludes empty lines and all comment types (// and /* */)",(totalLinesOfCode / 1000) * 20,20% weight,20 points,"Counts only actual code lines, excluding empty lines and all Rust comments (single-line // and multi-line /* */)","pub fn transfer() {\n    // This comment ignored\n    let amount = 100; // Only 2 lines counted\n}","1000 code lines = 20 points, 500 code lines = 10 points"
Number of Functions,Structural,Regex pattern matching,/fn\s+\w+/g,(numFunctions / 50) * 20,20% weight,20 points,"Counts all function definitions including pub and private functions","pub fn initialize() {}\nfn helper_function() {}","50 functions = 20 points, 10 functions = 4 points"
Number of Programs,Structural,Regex pattern matching,/#\[program\]/g,Not used in scoring,0 points,0 points,"Counts Solana program definitions marked with #[program] attribute","#[program]\npub mod my_program {}","Informational only - 2 programs detected"
State Variables,Structural,Complex regex parsing,/#\[account\]\s*pub\s+struct\s+\w+\s*\{[^}]*\}/g then /pub\s+\w+:/g,Not used in scoring,0 points,0 points,"Counts fields in #[account] structs, fallback to all struct/enum definitions","#[account]\npub struct UserAccount {\n    pub balance: u64,\n    pub owner: Pubkey\n}","2 state variables found in UserAccount"
Average Cyclomatic Complexity,Structural,Function boundary detection + decision point counting,/(?:pub\s+)?fn\s+\w+[^{]*\{/g + control flow patterns,(avgCyclomaticComplexity / 5) * 30,30% weight,30 points,"Calculates complexity per function by counting decision points (if/else/match/loops/&&/||)","pub fn process() {\n    if condition {\n        match value {\n            1 => {},\n            2 => {}\n        }\n    }\n}","Function complexity = 4 (base=1 + if=1 + match=1 + 2arms-1=1)"
Max Cyclomatic Complexity,Structural,Function boundary detection + decision point counting,Same as avg complexity calculation,(maxCyclomaticComplexity / 10) * 30,30% weight,30 points,"Finds the highest complexity among all functions in the codebase","Most complex function with nested if/match statements","Max complexity 10 = 30 points, complexity 8 = 24 points"
Total Cyclomatic Complexity,Structural,Sum of all function complexities,Sum of individual function complexities,Not used in scoring,0 points,0 points,"Total complexity across all functions in the codebase","Sum of all function complexities","Total complexity of 45 across 8 functions"
Composition Depth,Structural,Simplified estimation,Fixed value of 1,Not used in scoring,0 points,0 points,"Inheritance/composition depth - currently simplified to 1","struct A { b: B }\nstruct B { c: C }","Depth of 2 levels detected"
Function Visibility (Public),Structural,Regex pattern matching,/pub\s+fn/g,Not used in scoring,0 points,0 points,"Counts functions marked as public","pub fn public_function() {}","5 public functions found"
Function Visibility (Private),Structural,Negative lookahead regex,/(?<!pub\s)fn/g,Not used in scoring,0 points,0 points,"Counts functions without pub modifier","fn private_helper() {}","3 private functions found"
Function Visibility (Internal),Structural,Not implemented,N/A,Not used in scoring,0 points,0 points,"Internal visibility not applicable in Rust","N/A - Rust uses pub/private only","0 internal functions (Rust concept)"
View Functions,Structural,Simplified to 0,Fixed value,Not used in scoring,0 points,0 points,"Read-only functions - simplified implementation","// Not implemented for Rust","0 view functions (Solidity concept)"
Pure Functions,Structural,Set to numFunctions,Same as function count,Not used in scoring,0 points,0 points,"Functions without side effects - simplified to all functions","// All functions assumed pure","8 pure functions assumed"
Unsafe Code Blocks,Security,Regex pattern matching,/unsafe\s*{/g,unsafeCodeBlocks * 20,20 points each,No limit,"Counts Rust unsafe blocks that bypass safety checks","unsafe {\n    *raw_ptr = value;\n}","2 unsafe blocks = 40 points"
Panic Usage,Security,Regex pattern matching,/panic!/g,panicUsage * 5,5 points each,No limit,"Counts panic! macro usage which can crash the program","panic!(""Invalid state"");","10 panics = 50 points"
Unwrap Usage,Security,Regex pattern matching,/\.unwrap\(\)/g,unwrapUsage * 2,2 points each,No limit,"Counts .unwrap() calls that can panic on None/Err","result.unwrap();\noption.unwrap();","20 unwraps = 40 points"
Expect Usage,Security,Regex pattern matching,/\.expect\(/g,Not used in scoring,0 points,0 points,"Counts .expect() calls (similar to unwrap but with message)","result.expect(""Should work"");","5 expect calls found"
Match Without Default,Security,Complex regex matching,/match\s+\w+\s*{[^}]*}(?!\s*else)/g,Not used in scoring,0 points,0 points,"Counts match expressions without default/catch-all arm","match value {\n    1 => {},\n    2 => {}\n}","3 matches without default arm"
Array Bounds Checks,Security,Not implemented,N/A,Not used in scoring,0 points,0 points,"Array access without bounds checking - not implemented","array[index] // unchecked","0 bounds issues (not implemented)"
Memory Safety Issues,Security,Simplified to 0,Fixed value,memorySafetyIssues * 15,15 points each,No limit,"Memory safety violations - simplified implementation","// Not implemented","0 memory issues (simplified)"
Access Control Issues,Security,Simplified to 0,Fixed value,accessControlIssues * 10,10 points each,No limit,"Access control vulnerabilities - simplified implementation","// Not implemented","0 access control issues (simplified)"
Input Validation Issues,Security,Simplified to 0,Fixed value,Not used in scoring,0 points,0 points,"Missing input validation - simplified implementation","// Not implemented","0 validation issues (simplified)"
Integer Overflow Risks,Security,Regex pattern matching,/overflow|underflow/g,Included in economicRiskFactors,Variable,Variable,"Detects overflow/underflow keywords in code","// Check for overflow\nlet result = a + b;","2 overflow references = medium risk"
External Program Calls,Systemic,Simplified to 0,Fixed value,(externalProgramCalls / 10) * 30,30% weight,30 points,"Calls to external Solana programs - simplified implementation","// Not implemented","0 external calls (simplified)"
Unique External Calls,Systemic,Set collection,new Set<string>(),Not used in scoring,0 points,0 points,"Number of unique external programs called","// Not implemented","0 unique external programs"
Known Protocol Interactions,Systemic,Empty array,Fixed empty array,Not used in scoring,0 points,0 points,"Interactions with known protocols (Uniswap, Aave, etc)","// Not implemented","[] - no known protocols detected"
Standard Library Usage,Systemic,Hardcoded set,['anchor_lang', 'anchor_spl'],Not used in scoring,0 points,0 points,"Usage of standard libraries","use anchor_lang::prelude::*;","anchor_lang, anchor_spl detected"
Oracle Usage Count,Systemic,String matching,/pyth|Pyth/g and /switchboard|Switchboard/g,oracleUsage.length * 15,15 points each,No limit,"Detects oracle integrations by string matching","use pyth_sdk::Price;\nlet price = pyth::get_price();","2 oracles (Pyth, Switchboard) = 30 points"
CPI Usage,Systemic,Regex pattern matching,/token::|invoke|invoke_signed|CpiContext/g,(cpiUsage / 5) * 20,20% weight,20 points,"Cross-Program Invocation usage for calling other programs","invoke_signed(&instruction, &accounts, &[seeds]);","5 CPI calls = 20 points, 10 calls = 40 points"
Cross Program Invocation,Systemic,Empty array,Fixed empty array,Not used in scoring,0 points,0 points,"Detailed CPI call information - not implemented","// Not implemented","[] - no CPI details stored"
Constraint Usage,Systemic,Regex pattern matching,/#\[constraint\(/g,(constraintUsage / 10) * 15,15% weight,15 points,"Anchor constraint usage for validation","#[constraint(amount > 0)]","10 constraints = 15 points"
Access Control Patterns,Systemic,Hardcoded values,{ownable: 0, roleBased: 0, custom: 1},Not used in scoring,0 points,0 points,"Access control pattern detection - simplified","// Hardcoded to custom: 1","Custom access control pattern detected"
Token Transfers,Economic,Regex pattern matching,/transfer|mint|burn/g,(tokenTransfers / 10) * 25,25% weight,25 points,"Token operations including transfer/mint/burn","token::transfer(&ctx, amount);\ntoken::mint(&ctx, supply);","10 transfers = 25 points"
Complex Math Operations,Economic,Regex pattern matching,/math|calculate|compute/g,(complexMathOperations / 20) * 25,25% weight,25 points,"Complex mathematical operations","let result = calculate_interest(principal, rate);\ncompute_liquidity_ratio();","20 operations = 25 points"
Time Dependent Logic,Economic,Regex pattern matching,/Clock::get|unix_timestamp|timestamp|last_updated|created_at/gi,timeDependentLogic > 0 ? 20 : 0,20 points flat,20 points,"Logic that depends on time/timestamps","let now = Clock::get()?.unix_timestamp;\nif now > last_updated + DELAY {}","Any time logic = 20 points"
DeFi Patterns,Economic,String matching multiple patterns,"swap|add_liquidity, borrow|repay|liquidate, vest|unlock, stake|unstake",defiPatterns.length * 15,15 points each,No limit,"DeFi protocol pattern detection","pub fn swap_tokens() {}\npub fn add_liquidity() {}","AMM pattern detected = 15 points"
Economic Risk Factors,Economic,Multiple regex patterns + risk calculation,"overflow|underflow, /\s*0|/\s*zero, precision|rounding",riskFactors.reduce() * 2,2x multiplier,Variable,"Economic risks like overflow, division by zero, precision loss","let ratio = amount / total; // Division risk\n// overflow comment","Division by zero risk = medium severity"
Account Validation,Anchor-Specific,Regex pattern matching,/AccountInfo/g,Not used in scoring,0 points,0 points,"Anchor AccountInfo usage for account validation","fn process(ctx: Context<MyContext>) {\n    let account_info = &ctx.accounts.user.to_account_info();\n}","5 AccountInfo usages found"
Constraint Usage (Anchor),Anchor-Specific,Regex pattern matching,/#\[constraint\(/g,Not used in scoring,0 points,0 points,"Anchor #[constraint] attribute usage","#[constraint(user.balance >= amount)]","3 constraint validations found"
Instruction Handlers,Anchor-Specific,Complex regex matching,/pub\s+fn\s+\w+[^{]*ctx:\s*Context/g,Not used in scoring,0 points,0 points,"Functions that handle Anchor instructions","pub fn initialize(ctx: Context<Initialize>) -> Result<()> {}","4 instruction handlers found"
Program Derives,Anchor-Specific,Regex parsing + splitting,/#\[derive\(([^)]+)\)\]/g,Not used in scoring,0 points,0 points,"Derive macros used in program structs","#[derive(Accounts, Clone)]\npub struct MyAccounts {}","[""Accounts"", ""Clone""] derives found"
Account Types,Anchor-Specific,Simplified to 0,Fixed value,Not used in scoring,0 points,0 points,"Different account types used - not implemented","// Not implemented","0 account types (not implemented)"
Seeds Usage,Anchor-Specific,Regex pattern matching,/seeds\s*=/g,Not used in scoring,0 points,0 points,"PDA seeds usage in Anchor","#[account(seeds = [b""user"", user.key().as_ref()], bump)]","3 seeds usage found"
Bump Usage,Anchor-Specific,Regex pattern matching,/bump\s*=/g,Not used in scoring,0 points,0 points,"PDA bump usage in Anchor","#[account(seeds = [...], bump = user_bump)]","2 bump usages found"
Signer Checks,Anchor-Specific,String matching,/signer/g,Not used in scoring,0 points,0 points,"Signer validation in accounts","#[account(signer)]\npub authority: Signer<'info>","4 signer references found"
Owner Checks,Anchor-Specific,String matching,/owner/g,Not used in scoring,0 points,0 points,"Owner validation in accounts","#[account(owner = token::ID)]\npub token_account: Account<'info, TokenAccount>","6 owner references found"
Space Allocation,Anchor-Specific,Not implemented,N/A,Not used in scoring,0 points,0 points,"Account space allocation - not implemented","#[account(init, space = 8 + 32 + 64)]","0 space allocations (not implemented)"
Rent Exemption,Anchor-Specific,Not implemented,N/A,Not used in scoring,0 points,0 points,"Rent exemption handling - not implemented","#[account(init, rent_exempt = skip)]","0 rent exemptions (not implemented)"
